{"version":3,"sources":["core.js","dom.js","params.js","comic.js","request.js","characters.js","nest.js","ui.js","config.js","init.js"],"names":["core","BIWRBR","compose","funcs","value","reduce","val","fn","dom","query","selector","document","querySelector","evalAll","xPath","evaluate","eval","iterateNext","split","data","comp","key","charAt","substr","push","short","comps","!","#",".","attr","filter","pair","length","join","extract","id","classList","map","expand","name","attrs","applyAttrPair","elem","setAttribute","apply","expanded","createElement","step","parsed","parse","create","selectors","elems","concat","appendTo","parent","children","child","appendChild","listen","on","eventName","handler","addEventListener","row","cell","content","td","tr","append","add","Promise","resolve","then","params","defaults","subject","comic","[object Object]","shim","getItems","search","getPairs","items","item","decode","raw","decodeURIComponent","_","tidy","pairs","get","getList","url","urlObj","URL","Array","from","searchParams","entries","reducePair","obj","initial","Object","assign","String","values","vals","path","location","pathname","str","build","transitionDuration","flips","element","onSwap","getElement","node","Error","getBackgroundImage","style","backgroundImage","replace","getOriginal","src","shift","swap","char","isHistState","flip","delay","transform","backgroundPosition","pos","window","setTimeout","setProperties","remove","init","request","rather","spec","alts","alt","refine","altChars","sources","input","canon","href","all","characters","list","findBaseIndex","chars","found","idx","max","reindex","origin","len","newList","getIndexer","base","rebase","shuffle","randIdx","Math","floor","random","randomize","first","shuffled","reduceRight","getNext","currentSrc","isCurrent","endsWith","original","nest","dud","egg","select","develop","catch","hatch","lay","async","shell","deposit","eggs","clutch","flop","next","links","perma","prev","getSearch","comicId","setHref","main","nav","setHistory","history","pushState","title","resolved","mainThen","update","textContent","dropdown","sortChar","sorted","sort","option","opt","desc","dataset","selected","reduceChars","group","optgroup","label","getChildren","slice","populate","getCharacter","Number","change","event","target","preventDefault","register","charIdx","console","log","options","ui","onPop","state","onpopstate","wrapLinks","div","wrap","generate","header","text","head","color","textTransform","anchor","getPost","getElementById","scroll","transitionEnd","monkey","post","pad","documentElement","clientHeight","minHeight","rss","innerHTML","basic","config","getAttribute","trim","nominal","toLowerCase","default","nomSrc","method","comicPath","interface","onError","e","groupEnd"],"mappings":"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","file":"angola.js","sourcesContent":["'use strict';\n\nconst core = {  // eslint-disable-line no-unused-vars\n\tBIWRBR: 'butiwouldratherbereading',\n\n\tcompose: (...funcs) => (value = null) => (\n\t\tfuncs.reduce((val, fn) => fn(val), value)\n\t)\n};\n","const dom = {\n\tquery: (selector) => document.querySelector(selector),\n\n\tevalAll: (xPath) => (document.\n\t\tevaluate(xPath, document, null, 0)\n\t),\n\n\teval: (xPath) => dom.evalAll(xPath).iterateNext(),\n\n\tselector: {\n\t\tsplit: (selector) => `!${selector}`.split(/(?=[\\.#])/),\n\n\t\treduce: (data, comp) => {\n\t\t\tconst [key, val] = [comp.charAt(0), comp.substr(1)];\n\n\t\t\tdata[key].push(val);\n\n\t\t\treturn data;\n\t\t},\n\n\t\tshort: (comps) => {\n\t\t\tconst base = {'!': [], '#': [], '.': []};\n\n\t\t\treturn comps.reduce(dom.selector.reduce, base);\n\t\t},\n\n\t\tattr: {\n\t\t\tfilter: (pair) => pair[1].length > 0,\n\n\t\t\tjoin: (pair) => [pair[0], pair[1].join(' ')],\n\n\t\t\textract: (short) => {\n\t\t\t\tconst {'#': id, '.': classList} = short;\n\n\t\t\t\treturn [['id', id], ['class', classList]].\n\t\t\t\t\tfilter(dom.selector.attr.filter).\n\t\t\t\t\tmap(dom.selector.attr.join);\n\t\t\t},\n\t\t},\n\n\t\texpand: (short) => ({\n\t\t\tname: (short['!'].length) ? short['!'][0] : 'template',\n\t\t\tattrs: dom.selector.attr.extract(short),\n\t\t}),\n\n\t\tapplyAttrPair: (elem, pair) => {\n\t\t\telem.setAttribute(pair[0], pair[1]);\n\n\t\t\treturn elem;\n\t\t},\n\n\t\tapply: (expanded) => expanded.attrs.reduce(\n\t\t\tdom.selector.applyAttrPair,\n\t\t\tdocument.createElement(expanded.name)\n\t\t),\n\n\t\tstep: (parsed, step) => step(parsed),\n\n\t\tparse: (selector) => {\n\t\t\tconst steps = [\n\t\t\t\tdom.selector.split,\n\t\t\t\tdom.selector.short,\n\t\t\t\tdom.selector.expand,\n\t\t\t\tdom.selector.apply\n\t\t\t];\n\n\t\t\treturn steps.reduce(dom.selector.step, selector);\n\t\t}\n\t},\n\n\tcreate: (...selectors) => {\n\t\tconst elems = [].concat(selectors).map(dom.selector.parse);\n\n\t\treturn (selectors.length === 1) ? elems[0] : elems;\n\t},\n\n\tappendTo: (parent) => (children) => {\n\t\t[].concat(children).map((child) => parent.appendChild(child));\n\n\t\treturn parent;\n\t},\n\n\tlisten: (elem) => ({\n\t\ton: (eventName, handler) => elem.addEventListener(eventName, handler)\n\t}),\n\n\trow: {\n\t\tcell: (content) => {\n\t\t\tconst td = dom.create('td');\n\n\t\t\ttd.setAttribute('colspan', 3);\n\t\t\ttd.appendChild(content);\n\n\t\t\treturn td;\n\t\t},\n\n\t\tcreate: (td) => {\n\t\t\tconst tr = dom.create('tr.egg');\n\n\t\t\ttr.appendChild(td);\n\n\t\t\treturn tr;\n\t\t},\n\n\t\tappend: (row) => {\n\t\t\tconst parent = dom.query('center tbody');\n\t\t\tconst append = dom.appendTo(parent);\n\n\t\t\tappend(row);\n\n\t\t\treturn row;\n\t\t},\n\n\t\tadd: (content) => {\n\t\t\tPromise.\n\t\t\t\tresolve(content).\n\t\t\t\tthen(dom.row.cell).\n\t\t\t\tthen(dom.row.create).\n\t\t\t\tthen(dom.row.append);\n\t\t},\n\t},\n};\n","const params = {\n\t// TODO: eliminate defaults\n\tdefaults: ({subject: '', comic: '', [core.BIWRBR]: ''}),\n\n\tshim: {\n\t\tgetItems: (search) => search.split('&'),\n\n\t\tgetPairs: (items) => items.map((item) => item.split('=')),\n\n\t\tdecode: (pair) => {\n\t\t\tconst [name, raw = ''] = pair;\n\n\t\t\ttry {\n\t\t\t\treturn [name, decodeURIComponent(raw)];\n\t\t\t}\n\t\t\tcatch (_) {\n\t\t\t\treturn [name, raw];\n\t\t\t}\n\t\t},\n\n\t\ttidy: (pairs) => pairs.map(params.shim.decode),\n\n\t\tget: (search) => (Promise.\n\t\t\tresolve(search).\n\t\t\tthen(params.shim.getItems).\n\t\t\tthen(params.shim.getPairs).\n\t\t\tthen(params.shim.tidy)\n\t\t),\n\t},\n\n\tgetList: (url) => {\n\t\tconst urlObj = new URL(url);\n\n\t\tif ('searchParams' in urlObj) {\n\t\t\treturn Array.from(urlObj.searchParams.entries());\n\t\t}\n\n\t\treturn params.shim.get(urlObj.search.substr(1));\n\t},\n\n\treducePair: (obj, pair) => {\n\t\tconst [name, val = ''] = pair;\n\n\t\tobj[name] = val;\n\n\t\treturn obj;\n\t},\n\n\treduce: (pairs) => {\n\t\tconst initial = Object.assign({}, params.defaults);\n\n\t\treturn pairs.reduce(params.reducePair, initial);\n\t},\n\n\tparse: (url) => (Promise.\n\t\tresolve(url).\n\t\tthen(params.getList).\n\t\tthen(params.reduce)\n\t),\n\n\tjoin: {\n\t\tfilter: (pairs) => pairs.filter((pair) => String(pair[1]).length),\n\n\t\tpairs: (pairs) => pairs.map((pair) => pair.join('=')),\n\n\t\tvalues: (vals) => vals.join('&'),\n\n\t\tsearch: (search, path = document.location.pathname) => (\n\t\t\t[path, search].\n\t\t\t\tfilter((str) => str).\n\t\t\t\tjoin('?')\n\t\t),\n\t},\n\n\tbuild: (pairs) => (Promise.\n\t\tresolve(pairs).\n\t\tthen(params.join.filter).\n\t\tthen(params.join.pairs).\n\t\tthen(params.join.values)\n\t),\n};\n","const comic = {\n\ttransitionDuration: 800,\n\n\tflips: 0,\n\n\telement: null,\n\n\tonSwap: () => {},\n\n\tgetElement: (node) => {\n\t\tif (node) { return node; }\n\n\t\tthrow new Error('comic not found');\n\t},\n\n\tgetBackgroundImage: (elem) => {\n\t\tconst decl = elem.style.backgroundImage;\n\n\t\treturn decl.replace(/^.+\\(['\"]*([^\\)\"']+).+$/, '$1');\n\t},\n\n\tgetOriginal: (elem) => {\n\t\treturn [comic.getBackgroundImage(elem), elem.src].\n\t\t\tfilter((path) => path).\n\t\t\tshift();\n\t},\n\n\tswap: (char, isHistState) => () => {\n\t\tcomic.element.src = char.src;\n\n\t\tcomic.onSwap(char, isHistState);\n\t},\n\n\tflip: (char, isHistState = false) => {\n\t\tconst swap = comic.swap(char, isHistState);\n\t\tconst delay = comic.transitionDuration / 2;\n\n\t\t++comic.flips;\n\t\tcomic.element.style.transform = `rotateY(${comic.flips * 360}deg)`;\n\t\tcomic.element.style.backgroundPosition = char.pos;\n\t\twindow.setTimeout(swap, delay);\n\t},\n\n\tsetProperties: (elem) => {\n\t\tconst path = comic.getOriginal(elem);\n\n\t\tcomic.element = elem;\n\t\telem.classList.remove('comic');\n\t\telem.style.transitionDuration = `${comic.transitionDuration}ms`;\n\t\telem.style.backgroundImage = `url(${path})`;\n\n\t\treturn path;\n\t},\n\n\tinit: () => (Promise.\n\t\tresolve('//body/center/table/tbody/tr[1]/td[2]/img').\n\t\tthen(dom.eval).\n\t\tthen(comic.getElement).\n\t\tthen(comic.setProperties)\n\t),\n};\n","const request = {\n\trather: (spec, alts) => (alts.\n\t\tfilter((alt) => alt.rather === spec).\n\t\tmap((alt) => alt.rather).\n\t\tconcat('').\n\t\tshift()\n\t),\n\n\trefine: (altChars) => (sources) => {\n\t\tconst [input, canon] = sources;\n\t\tconst query = Object.assign({}, input, {canon: canon.comic});\n\n\t\tquery.rather = request.rather(query[core.BIWRBR], altChars);\n\t\tcomic.id = query.comic;\n\n\t\treturn query;\n\t},\n\n\tinput: () => params.parse(document.location.href),\n\n\tcanon: () => (Promise.\n\t\tresolve('meta[property=\"og:url\"]').\n\t\tthen(dom.query).\n\t\tthen((elem) => elem.content).\n\t\tthen(params.parse)\n\t),\n\n\tinit: (altChars) => {\n\t\tconst refine = request.refine(altChars);\n\n\t\treturn Promise.\n\t\t\tall([request.input(), request.canon()]).\n\t\t\tthen(refine);\n\t},\n};\n","const characters = {\n\tlist: [],\n\n\tfindBaseIndex: (chars, rather) => {\n\t\tlet idx = -1;\n\t\tlet found;\n\t\tlet max = chars.length;\n\n\t\tdo {\n\t\t\t++idx;\n\t\t\tfound = (chars[idx].rather === rather);\n\t\t} while (idx < max && !found);\n\n\t\treturn idx % max;\n\t},\n\n\treindex: (origin, len) => (newList, char, idx) => {\n\t\tconst newIdx = (idx + len - origin) % len;\n\n\t\tnewList[newIdx] = char;\n\n\t\treturn newList;\n\t},\n\n\tgetIndexer: (chars, rather) => {\n\t\tconst base = characters.findBaseIndex(chars, rather);\n\n\t\treturn characters.reindex(base, chars.length);\n\t},\n\n\trebase: (rather) => (chars) => {\n\t\tconst reindex = characters.getIndexer(chars, rather);\n\n\t\treturn chars.reduce(reindex, Array(chars.length));\n\t},\n\n\tshuffle: (all, char, idx) => {\n\t\tconst randIdx = Math.floor(Math.random() * (idx + 1));\n\n\t\tall[idx] = all[randIdx];\n\t\tall[randIdx] = char;\n\n\t\treturn all;\n\t},\n\n\trandomize: (chars) => {\n\t\tconst first = [chars.shift()];\n\t\tconst shuffled = chars.reduceRight(characters.shuffle, chars);\n\n\t\tcharacters.list = first.\n\t\t\tconcat(shuffled).\n\t\t\tmap((char, idx) => Object.assign({idx}, char));\n\n\t\treturn characters.list;\n\t},\n\n\tgetNext: (currentSrc) => {\n\t\tlet isCurrent = false;\n\t\tlet idx = 0;\n\t\tlet max = characters.list.length;\n\n\t\twhile (!isCurrent && idx < max) {\n\t\t\tisCurrent = (currentSrc.endsWith(characters.list[idx].src));\n\t\t\t++idx;\n\t\t}\n\n\t\treturn characters.list[idx % max];\n\t},\n\n\tinit: (altChars, original, rather) => {\n\t\tconst rebase = characters.rebase(rather);\n\n\t\treturn Promise.\n\t\t\tresolve([original].concat(altChars)).\n\t\t\tthen(rebase).\n\t\t\tthen(characters.randomize);\n\t},\n};\n","const nest = {\n\tdud: () => '<em>Friiiiig.</em>',\n\n\tegg: (egg) => {\n\t\treturn Promise.\n\t\t\tresolve().\n\t\t\tthen(egg.select).\n\t\t\tthen(egg.develop).\n\t\t\tcatch(nest.dud).\n\t\t\tthen(egg.hatch);\n\t},\n\n\tlay: async (comps) =>  {\n\t\tconst shell = dom.create('div');\n\t\tconst append = dom.appendTo(shell);\n\n\t\tawait Promise.\n\t\t\tresolve(comps).\n\t\t\tthen(append).\n\t\t\tthen(dom.row.add);\n\t},\n\n\tdeposit: (eggs) => eggs.map(nest.lay),\n\n\tinit: (eggs) => {\n\t\tconst clutch = eggs.map(nest.egg);\n\n\t\treturn Promise.all(clutch).then(nest.deposit);\n\t},\n};\n","const flip = {\n\tflop: () => {\n\t\tconst next = characters.getNext(comic.element.src);\n\n\t\tcomic.flip(next);\n\t},\n\n\tinit: () => (dom.\n\t\tlisten(comic.element).\n\t\ton('dblclick', flip.flop)\n\t),\n};\n\nconst links = {\n\tperma: null,\n\n\tprev: null,\n\n\tnext: null,\n\n\tgetSearch: (comicId, rather) => (Promise.\n\t\tresolve([['comic', comicId], [core.BIWRBR, rather]]).\n\t\tthen(params.build)\n\t),\n\n\tsetHref: (elem) => (url) => {\n\t\telem.href = url;\n\n\t\treturn url;\n\t},\n\n\tapply: (elem, location, comicId, char) => {\n\t\tconst path = location.pathname;\n\t\tconst getURL = (search) => params.join.search(search, path);\n\t\tconst setHref = links.setHref(elem);\n\n\t\treturn links.\n\t\t\tgetSearch(comicId, char.rather).\n\t\t\tthen(getURL).\n\t\t\tthen(setHref);\n\t},\n\n\tmain: (elem, char) => {\n\t\tconst {location} = document;\n\n\t\treturn links.apply(elem, location, comic.id, char);\n\t},\n\n\tnav: (elem, query, char) => {\n\t\tconst location = new URL(elem.href);\n\n\t\treturn links.apply(elem, location, query.comic, char);\n\t},\n\n\tsetHistory: (char) => (url) => {\n\t\twindow.history.pushState(char, document.title, url);\n\t},\n\n\tresolve: (resolved) => {\n\t\tconst [prev, next, char, isHistState, elem = links.perma] = resolved;\n\t\tconst mainThen = (isHistState) ? () => {} : links.setHistory(char);\n\n\t\tlinks.nav(links.prev, prev, char);\n\t\tlinks.nav(links.next, next, char);\n\t\tlinks.\n\t\t\tmain(links.perma, char).\n\t\t\tthen(mainThen);\n\n\t\treturn elem;\n\t},\n\n\tupdate: (char, isHistState = false) => {\n\t\treturn Promise.\n\t\t\tall([\n\t\t\t\tparams.parse(links.prev.href),\n\t\t\t\tparams.parse(links.next.href),\n\t\t\t\tchar,\n\t\t\t\tisHistState,\n\t\t\t]).\n\t\t\tthen(links.resolve);\n\t},\n\n\tassign: (elem) => {\n\t\tlinks.perma = elem;\n\n\t\treturn elem;\n\t},\n\n\tinit: () => {\n\t\tlinks.perma = dom.create('a.permalink');\n\t\tlinks.perma.textContent = '(permalink)';\n\t\tlinks.prev = dom.eval('//body/center/table/tbody/tr[1]/td[1]/div/a');\n\t\tlinks.next = dom.eval('//body/center/table/tbody/tr[1]/td[3]/div/a');\n\n\t\treturn links.update(characters.list[0]);\n\t},\n};\n\nconst dropdown = {\n\telement: null,\n\n\tsortChar: (sorted, char) => {\n\t\tsorted[char.sort] = char;\n\n\t\treturn sorted;\n\t},\n\n\tappendChild: (parent, child) => {\n\t\tparent.append(child);\n\n\t\treturn parent;\n\t},\n\n\toption: (char, rather) => {\n\t\tconst opt = dom.create('option');\n\n\t\topt.value = char.idx;\n\t\topt.textContent = char.desc;\n\t\topt.dataset.src = char.src;\n\t\topt.selected = (char.rather === rather);\n\n\t\treturn opt;\n\t},\n\n\treduceChars: (rather) => (group, char) => {\n\t\tconst opt = dropdown.option(char, rather);\n\n\t\treturn dropdown.appendChild(group, opt);\n\t},\n\n\toptgroup: (chars, rather) => {\n\t\tconst group = dom.create('optgroup');\n\t\tconst reduceChars = dropdown.reduceChars(rather);\n\n\t\tgroup.label = '...but I would rather be reading:';\n\n\t\treturn chars.reduce(reduceChars, group);\n\t},\n\n\tgetChildren: (chars, rather) => {\n\t\tconst len = chars;\n\t\tconst sorted = chars.reduce(dropdown.sortChar, Array(len));\n\n\t\treturn [\n\t\t\tdropdown.option(sorted[0], rather),\n\t\t\tdropdown.optgroup(sorted.slice(1), rather)\n\t\t];\n\t},\n\n\tpopulate: (rather) => (select) => (dropdown.\n\t\tgetChildren(characters.list, rather).\n\t\treduce(dropdown.appendChild, select)\n\t),\n\n\tgetCharacter: (val) => {\n\t\tconst idx = Number(val);\n\n\t\treturn characters.list[idx];\n\t},\n\n\tchange: (event) => {\n\t\tconst char = dropdown.getCharacter(event.target.value);\n\n\t\tevent.preventDefault();\n\t\tcomic.flip(char);\n\t},\n\n\tregister: (elem) => {\n\t\tdom.listen(elem).on('change', dropdown.change);\n\n\t\treturn elem;\n\t},\n\n\tassign: (elem) => {\n\t\tdropdown.element = elem;\n\n\t\treturn elem;\n\t},\n\n\tupdate: (charIdx) => {\n\t\tconsole.log('dropdown.update');\n\t\tfor (let opt of Array.from(dropdown.element.options)) {\n\t\t\tconsole.log(opt.value, charIdx);\n\t\t\tconsole.log(opt);\n\t\t\tif (Number(opt.value) === charIdx) {\n\t\t\t\topt.selected = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t},\n\n\tinit: (rather) => {\n\t\tconst populate = dropdown.populate(rather);\n\n\t\treturn Promise.\n\t\t\tresolve('select').\n\t\t\tthen(dom.create).\n\t\t\tthen(populate).\n\t\t\tthen(dropdown.register).\n\t\t\tthen(dropdown.assign);\n\t},\n};\n\nconst ui = {\n\tupdate: (char, isHistState) => {\n\t\tlinks.update(char, isHistState);\n\t\tdropdown.update(char.idx);\n\t},\n\n\tonPop: (event) => {\n\t\tif (event.state) {\n\t\t\tcomic.flip(event.state, true);\n\t\t}\n\t},\n\n\tregister: () => {\n\t\tcomic.onSwap = ui.update;\n\t\twindow.onpopstate = ui.onPop;\n\t},\n\n\twrapLinks: (elems) => {\n\t\tconst div = dom.create('div');\n\t\tconst wrap = dom.appendTo(div);\n\n\t\treturn wrap(elems);\n\t},\n\n\tresolve: (resolved) => {\n\t\tconst elems = resolved.slice(2);\n\n\t\treturn Promise.\n\t\t\tresolve(elems).\n\t\t\tthen(ui.wrapLinks).\n\t\t\tthen(dom.row.add);\n\t},\n\n\tinit: (query) => (Promise.\n\t\tall([\n\t\t\tui.register(),\n\t\t\tflip.init(),\n\t\t\tlinks.init(),\n\t\t\tdropdown.init(query.rather),\n\t\t]).\n\t\tthen(ui.resolve)\n\t),\n};\n","const generate = {\n\theader: (text) => {\n\t\tconst head = dom.create('h2');\n\n\t\thead.textContent = text;\n\t\t// hack for Safari //\n\t\thead.style.color = '#222';\n\t\thead.style.textTransform = 'none';\n\n\t\treturn head;\n\t},\n\n\tanchor: (href) => (dom.\n\t\tquery('#blogpost center > a').\n\t\tsetAttribute('name', href.substr(1))\n\t),\n\n\tgetPost: () => document.getElementById('blogpost'),\n\n\tscroll: () => {\n\t\tconst post =  generate.getPost();\n\n\t\tpost.classList.add('angola');\n\t},\n\n\ttransitionEnd: () => {\n\t\tconst post = generate.getPost();\n\n\t\tpost.classList.remove('angola');\n\t},\n\n\tmonkey: () => {\n\t\tconst post = generate.getPost();\n\t\tconst pad = document.documentElement.clientHeight - 200;\n\n\t\tpost.addEventListener('transitionend', generate.transitionEnd);\n\t\tdom.query('#container').style.minHeight = pad + 'px';\n\t},\n\n\trss: (name, value) => {\n\t\tconst href = '#angola-maldives';\n\t\tconst head = generate.header(name);\n\t\tconst content = dom.create('a');\n\n\t\tcontent.innerHTML = value;\n\t\tcontent.setAttribute('href', href);\n\t\tcontent.addEventListener('click', generate.scroll);\n\t\tgenerate.anchor(href);\n\t\tgenerate.monkey();\n\n\t\treturn [head, content];\n\t},\n\n\tbasic: (name) => (value) => {\n\t\tconst head = generate.header(name);\n\t\tconst content = dom.create('div');\n\n\t\tcontent.innerHTML = value;\n\n\t\treturn [head, content];\n\t},\n};\n\nconst config = {\n\teggs: () => (Promise.resolve([\n\t\t{\n\t\t\thatch: generate.basic('Title'),\n\n\t\t\tselect: () => comic.element,\n\n\t\t\tdevelop: (elem) => {\n\t\t\t\tconst original = elem.getAttribute('title');\n\t\t\t\tconst next = 'DOUBLE CLICK FOR MORE AWESOME FUN TIMES!';\n\n\t\t\t\telem.setAttribute('title', next);\n\n\t\t\t\treturn original;\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\thatch: generate.basic('Contact'),\n\n\t\t\tselect: () => dom.query('.topnav a[href^=mailto]'),\n\n\t\t\tdevelop: (elem) => (Promise.\n\t\t\t\tresolve(elem.getAttribute('href')).\n\t\t\t\tthen(params.parse).\n\t\t\t\tthen((params) => params.subject)\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\thatch: (value) => generate.rss('RSS', value),\n\n\t\t\tselect: () => {\n\t\t\t\tconst xp = '//body//comment()[contains(., \\'rss-title\\')]';\n\n\t\t\t\treturn dom.eval(xp);\n\t\t\t},\n\n\t\t\tdevelop: (elem) => elem.data.trim(),\n\t\t},\n\t])),\n\n\tcharacters: {\n\t\tsrc: (nominal) => nominal.split('.png')[0] + '.png',\n\n\t\trather: (desc) => desc.replace(/[^a-z]/gi, '').toLowerCase(),\n\n\t\talt: (label) => {\n\t\t\tconst rather = config.characters.rather(label);\n\n\t\t\treturn {rather, desc: label};\n\t\t},\n\n\t\tdefault: () => ({rather: '', desc: 'Standard View'}),\n\n\t\tcreate: (nomSrc, label = '', pos = '0 0', sort = 0) => new Promise(\n\t\t\t(resolve) => {\n\t\t\t\tconst src = config.characters.src(nomSrc);\n\t\t\t\tconst method = (label) ? 'alt' : 'default';\n\n\t\t\t\tresolve(Object.assign(\n\t\t\t\t\t{src, pos, sort},\n\t\t\t\t\tconfig.characters[method](label)\n\t\t\t\t));\n\t\t\t}\n\t\t),\n\n\t\tgenerate: (alts) => Promise.all(\n\t\t\talts.map((alt, idx) => {\n\t\t\t\tconst [nomSrc, label, pos = '0 0'] = alt;\n\n\t\t\t\treturn config.characters.create(nomSrc, label, pos, idx + 1);\n\t\t\t})\n\t\t),\n\t},\n\n\talts: () => config.characters.generate([\n\t\t['assimilated', 'One Where T-Rex Got Assimilated'],\n\t\t['clothes', 'One Where T-Rex Wears More'],\n\t\t['frig', 'One Where T-Rex Swears More'],\n\t\t['feathers', 'Something More Historically Accurate'],\n\t\t['lastever', 'The Last Dinosaur Comic Ever'],\n\t\t['penny', 'Penny Arcade', '7px 8px'],\n\t\t['problemsleuth', 'Problem Sleuth'],\n\t\t['xkcd', 'XKCD'],\n\t]),\n};\n","const init = {\n\tconfig: () => Promise.all([\n\t\tcomic.init(),\n\t\tconfig.alts(),\n\t\tconfig.eggs()\n\t]),\n\n\tbasic: (resolved) => {\n\t\tconst [comicPath, altChars, eggs] = resolved;\n\n\t\treturn Promise.all([\n\t\t\taltChars,\n\t\t\tconfig.characters.create(comicPath),\n\t\t\trequest.init(altChars),\n\t\t\tnest.init(eggs),\n\t\t]);\n\t},\n\n\tcharacters: (resolved) => {\n\t\tconst [altChars, original, query] = resolved;\n\n\t\treturn Promise.all([\n\t\t\tquery,\n\t\t\tcharacters.init(altChars, original, query.rather)\n\t\t]);\n\t},\n\n\tinterface: (resolved) => ui.init(resolved[0]),\n\n\tonError: (e) => {\n\t\tconsole.group('Angola Maldives: Exception');\n\t\tconsole.log(e);\n\t\tconsole.groupEnd();\n\t},\n\n\tall: () => (Promise.\n\t\tresolve(null).\n\t\tthen(init.config).\n\t\tthen(init.basic).\n\t\tthen(init.characters).\n\t\tthen(init.interface).\n\t\tcatch(init.onError)\n\t),\n};\n\ninit.all();\n"]}